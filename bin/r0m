#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

INSTALLED_APPS_FILE="${HOME}/.installed.apps"

touch "$INSTALLED_APPS_FILE"

_package_available() {
    case "$1" in
        flatpak:*)
            local app_id=${1#flatpak:}
            flatpak remote-info --show-metadata flathub "$app_id" &>/dev/null
            ;;
        *)
            dnf list available "$1" &>/dev/null
            ;;
    esac
}

_package_installed() {
    case "$1" in
        flatpak:*)
            local app_id=${1#flatpak:}
            flatpak list --app --columns=application | grep -q "^${app_id}$"
            ;;
        *)
            dnf list installed "$1" &>/dev/null
            ;;
    esac
}

install() {
    if [ $# -eq 0 ]; then
        echo -e "${RED}Error: No packages specified for installation.${NC}" >&2
        return 1
    fi

    local to_install=()
    local unavailable=()

    for pkg in "$@"; do
        if _package_available "$pkg"; then
            to_install+=("$pkg")
        else
            unavailable+=("$pkg")
            echo -e "${RED}Error: Package '$pkg' not available in repositories.${NC}" >&2
        fi
    done

    if [ ${#unavailable[@]} -gt 0 ]; then
        echo -e "${RED}Aborting due to unavailable packages.${NC}" >&2
        return 1
    fi

    echo -e "${BLUE}The following packages will be installed: ${YELLOW}${to_install[*]}${NC}"
    read -p "Continue? [y/N] " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Installation cancelled.${NC}"
        return 0
    fi

    local dnf_pkgs=()
    local flatpak_pkgs=()
    
    for pkg in "${to_install[@]}"; do
        case "$pkg" in
            flatpak:*)
                flatpak_pkgs+=("${pkg#flatpak:}")
                ;;
            *)
                dnf_pkgs+=("$pkg")
                ;;
        esac
    done

    if [ ${#dnf_pkgs[@]} -gt 0 ]; then
        sudo dnf install -y "${dnf_pkgs[@]}"
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: DNF installation failed for one or more packages.${NC}" >&2
            return 1
        fi
    fi

    if [ ${#flatpak_pkgs[@]} -gt 0 ]; then
        flatpak install -y flathub "${flatpak_pkgs[@]}"
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: Flatpak installation failed for one or more packages.${NC}" >&2
            return 1
        fi
    fi

    for pkg in "${to_install[@]}"; do
        if ! grep -q "^${pkg}$" "$INSTALLED_APPS_FILE"; then
            echo "$pkg" >> "$INSTALLED_APPS_FILE"
            echo -e "${GREEN}Added $pkg to installed apps list${NC}"
        fi
    done

    echo -e "${GREEN}Installation completed successfully.${NC}"
}

remove() {
    if [ $# -eq 0 ]; then
        echo -e "${RED}Error: No packages specified for removal.${NC}" >&2
        return 1
    fi

    local to_remove=()
    local not_installed=()

    for pkg in "$@"; do
        if _package_installed "$pkg"; then
            to_remove+=("$pkg")
        else
            not_installed+=("$pkg")
            echo -e "${YELLOW}Warning: Package '$pkg' not installed.${NC}" >&2
        fi
    done

    if [ ${#to_remove[@]} -eq 0 ]; then
        echo -e "${YELLOW}No packages to remove.${NC}"
        return 0
    fi

    echo -e "${BLUE}The following packages will be removed: ${YELLOW}${to_remove[*]}${NC}"
    read -p "Continue? [y/N] " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Removal cancelled.${NC}"
        return 0
    fi

    local dnf_pkgs=()
    local flatpak_pkgs=()
    
    for pkg in "${to_remove[@]}"; do
        case "$pkg" in
            flatpak:*)
                flatpak_pkgs+=("${pkg#flatpak:}")
                ;;
            *)
                dnf_pkgs+=("$pkg")
                ;;
        esac
    done

    if [ ${#dnf_pkgs[@]} -gt 0 ]; then
        sudo dnf remove -y "${dnf_pkgs[@]}"
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: DNF removal failed for one or more packages.${NC}" >&2
            return 1
        fi
    fi

    if [ ${#flatpak_pkgs[@]} -gt 0 ]; then
        flatpak uninstall -y "${flatpak_pkgs[@]}"
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: Flatpak removal failed for one or more packages.${NC}" >&2
            return 1
        fi
    fi

    for pkg in "${to_remove[@]}"; do
        if grep -q "^${pkg}$" "$INSTALLED_APPS_FILE"; then
            sed -i "/^${pkg}$/d" "$INSTALLED_APPS_FILE"
            echo -e "${GREEN}Removed $pkg from installed apps list${NC}"
        fi
    done

    echo -e "${GREEN}Removal completed successfully.${NC}"
}

query() {
    if [ $# -eq 0 ]; then
        echo -e "${BLUE}Tracked installed packages:${NC}"
        cat "$INSTALLED_APPS_FILE"
        echo -e "\n${BLUE}All installed DNF packages:${NC}"
        dnf list installed
        echo -e "\n${BLUE}All installed Flatpak applications:${NC}"
        flatpak list --app --columns=application
        return 0
    fi

    for pkg in "$@"; do
        echo -ne "${BLUE}Package $pkg: ${NC}"
        if grep -q "^${pkg}$" "$INSTALLED_APPS_FILE"; then
            echo -ne "${GREEN}Tracked as installed${NC} | "
        else
            echo -ne "${YELLOW}Not tracked${NC} | "
        fi

        if _package_installed "$pkg"; then
            echo -e "${GREEN}Actually installed${NC}"
        else
            echo -e "${RED}Not installed${NC}"
            case "$pkg" in
                flatpak:*)
                    flatpak search "${pkg#flatpak:}"
                    ;;
                *)
                    dnf search "$pkg"
                    ;;
            esac
        fi
    done
}

update() {
    if [ $# -eq 0 ]; then
        echo -e "${BLUE}All packages will be updated.${NC}"
        read -p "Continue? [y/N] " confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Update cancelled.${NC}"
            return 0
        fi
        
        sudo dnf update -y
        
        flatpak update -y
        
        echo -e "${GREEN}Update completed successfully.${NC}"
    else
        echo -e "${BLUE}The following packages will be updated: ${YELLOW}$*${NC}"
        read -p "Continue? [y/N] " confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Update cancelled.${NC}"
            return 0
        fi
        
        local dnf_pkgs=()
        local flatpak_pkgs=()
        
        for pkg in "$@"; do
            case "$pkg" in
                flatpak:*)
                    flatpak_pkgs+=("${pkg#flatpak:}")
                    ;;
                *)
                    dnf_pkgs+=("$pkg")
                    ;;
            esac
        done

        if [ ${#dnf_pkgs[@]} -gt 0 ]; then
            sudo dnf update -y "${dnf_pkgs[@]}"
            if [ $? -ne 0 ]; then
                echo -e "${RED}Error: DNF update failed for one or more packages.${NC}" >&2
                return 1
            fi
        fi

        if [ ${#flatpak_pkgs[@]} -gt 0 ]; then
            flatpak update -y "${flatpak_pkgs[@]}"
            if [ $? -ne 0 ]; then
                echo -e "${RED}Error: Flatpak update failed for one or more packages.${NC}" >&2
                return 1
            fi
        fi
        
        echo -e "${GREEN}Update completed successfully.${NC}"
    fi
}

if [ $# -eq 0 ]; then
    echo -e "${BLUE}Usage: $0 [command] [packages...]${NC}"
    echo -e "${BLUE}Commands:${NC}"
    echo -e "  ${GREEN}i, install${NC}   Install packages"
    echo -e "  ${BLUE}u, update${NC}    Update packages"
    echo -e "  ${RED}r, remove${NC}    Remove packages"
    echo -e "  ${YELLOW}q, query${NC}     Query package status"
    echo -e ""
    echo -e "${BLUE}For Flatpak packages, prefix with 'flatpak:' (e.g., flatpak:org.gnome.Calculator)${NC}"
    exit 1
fi

case "$1" in
    i|install)
        shift
        if [ $# -eq 0 ]; then
            echo -e "${RED}Error: No packages specified for installation.${NC}" >&2
            exit 1
        fi
        install "$@"
        ;;
    u|update)
        shift
        update "$@"
        ;;
    r|remove)
        shift
        if [ $# -eq 0 ]; then
            echo -e "${RED}Error: No packages specified for removal.${NC}" >&2
            exit 1
        fi
        remove "$@"
        ;;
    q|query)
        shift
        query "$@"
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$1'${NC}" >&2
        echo -e "${BLUE}Valid commands: ${GREEN}i/install${NC}, ${BLUE}u/update${NC}, ${RED}r/remove${NC}, ${YELLOW}q/query${NC}" >&2
        exit 1
        ;;
esac
